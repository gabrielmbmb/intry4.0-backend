# Generated by Django 2.2.13 on 2020-06-09 16:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Model name', max_length=128)),
                ('is_training', models.BooleanField(default=False, help_text='Wether the model is being trained or not')),
                ('trained', models.BooleanField(default=False, help_text='Wether the model is trained or not')),
                ('deployed', models.BooleanField(default=False, help_text='Wether the model is deployed or not')),
                ('date_trained', models.DateField(blank=True, default=None, help_text='Date the model was trained', null=True)),
                ('date_deployed', models.DateField(blank=True, default=None, help_text='Date the model was deployed', null=True)),
                ('num_predictions', models.IntegerField(default=0, help_text='Number of predictions made by this model')),
            ],
        ),
        migrations.CreateModel(
            name='PLCModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urn', models.CharField(help_text='Uniform Resource Name of the PLC in Orion Context Broker', max_length=256)),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plcs', to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='SensorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the sensor', max_length=256)),
                ('plc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='datamodel.PLCModel')),
            ],
        ),
        migrations.CreateModel(
            name='PCAMahalanobisModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_components', models.IntegerField(default=2, help_text='Numbers of components for the PCA algorithm', validators=[django.core.validators.MinValueValidator(1)])),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pca_mahalanobis', to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='OneClassSVMModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kernel', models.CharField(choices=[('linear', 'linear'), ('poly', 'poly'), ('rbf', 'rbf'), ('sigmoid', 'sigmoid'), ('precomputed', 'precomputed')], default='rbf', help_text='Kernel type for One Class SVM', max_length=24)),
                ('degree', models.IntegerField(default=3, help_text='Degree of the polynomal kernel function for One Class SVM')),
                ('gamma', models.CharField(default='scale', help_text="Kernel coefficient for 'rbf', 'poly' and 'sigmoid' in One Class SVM. It can 'scale', 'auto' or float", max_length=24)),
                ('coef0', models.FloatField(default=0.0, help_text="Independent term in kernel function for One Class SVM. Only significant in 'poly'")),
                ('tol', models.FloatField(default=0.001, help_text='Tolerance for stopping criterion for One Class SVM')),
                ('shrinking', models.BooleanField(default=True, help_text='Whether to use the shrinking heuristic for One Class SVM')),
                ('cache_size', models.IntegerField(default=200, help_text='Specify the size of the kernel cache in MB for One Class SVM')),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='LocalOutlierFactorModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_neighbors', models.IntegerField(default=20, help_text='Number of neighbors to use in LOF')),
                ('algorithm', models.CharField(choices=[('ball_tree', 'ball_tree'), ('kd_tree', 'kd_tree'), ('brute', 'brute'), ('auto', 'auto')], default='auto', help_text='Algorithm used to compute the nearest neighbors in LOF', max_length=24)),
                ('leaf_size', models.IntegerField(default=30, help_text='Leaf size passed to BallTree or KDTree in LOF')),
                ('metric', models.CharField(default='minkowski', help_text='The distance metric to use for the tree in LOF', max_length=24)),
                ('p', models.IntegerField(default=2, help_text='Paremeter of the Minkowski metric in LOF')),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='KNNModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_neighbors', models.IntegerField(default=5, help_text='Number of neighbors to use in KNN')),
                ('radius', models.FloatField(default=1.0, help_text='The range of parameter space to use by default for radius_neighbors')),
                ('algorithm', models.CharField(choices=[('ball_tree', 'ball_tree'), ('kd_tree', 'kd_tree'), ('brute', 'brute'), ('auto', 'auto')], default='auto', help_text='Algorithm used to compute the nearest neighbors in KNN', max_length=24)),
                ('leaf_size', models.IntegerField(default=30, help_text='Leaf size passed to BallTree or KDTree in KNN')),
                ('metric', models.CharField(default='minkowski', help_text='The distance metric to use for the tree in KNN', max_length=24)),
                ('p', models.IntegerField(default=2, help_text='Paremeter of the Minkowski metric in knn')),
                ('score_func', models.CharField(choices=[('max_distance', 'max_distance'), ('average', 'average'), ('median', 'median')], default='max_distance', help_text='The function used to score anomalies in KNN', max_length=24)),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='KMeansModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_clusters', models.IntegerField(blank=True, help_text='Number of clusters for the K-Means algorithm', null=True)),
                ('max_cluster_elbow', models.IntegerField(default=100, help_text='Maximun number of cluster to test in the Elbow Method')),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='IsolationForestModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_estimators', models.IntegerField(default=100, help_text='The number of base estimators in the ensemble for Isolation Forest')),
                ('max_features', models.FloatField(default=1.0, help_text='Number of features to draw from X to train each base estimator for Isolation Forest')),
                ('bootstrap', models.BooleanField(default=False, help_text='Indicates if the Bootstrap technique is going to be applied for Isolation FOrest')),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='GaussianDistributionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('epsilon_candidates', models.IntegerField(default=100000000, help_text='Number of epsilon values that will be tested to find the best one')),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
        migrations.CreateModel(
            name='AutoencoderModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hidden_neurons', models.CharField(default='32,16,16,32', help_text='Neural Network layers and the number of neurons in each layer', max_length=128, validators=[django.core.validators.int_list_validator])),
                ('dropout_rate', models.FloatField(default=0.2, help_text='Dropout rate across all the layers of the Neural Network')),
                ('activation', models.CharField(choices=[('elu', 'elu'), ('softmax', 'softmax'), ('selu', 'selu'), ('softplus', 'softplus'), ('softsign', 'softsign'), ('relu', 'relu'), ('tanh', 'tanh'), ('sigmoid', 'sigmoid'), ('hard_sigmoid', 'hard_sigmoid'), ('exponential', 'exponential')], default='elu', help_text='Layers activation function of Neural Network', max_length=24)),
                ('kernel_initializer', models.CharField(choices=[('Zeros', 'Zeros'), ('Ones', 'Ones'), ('Constant', 'Constant'), ('RandomNormal', 'RandomNormal'), ('RandomUniform', 'RandomUniform'), ('TruncatedNormal', 'TruncatedNormal'), ('VarianceScaling', 'VarianceScaling'), ('Orthogonal', 'Orthogonal'), ('Identity', 'Identity'), ('lecun_uniform', 'lecun_uniform'), ('glorot_normal', 'glorot_normal'), ('glorot_uniform', 'glorot_uniform'), ('he_normal', 'he_normal'), ('lecun_normal', 'lecun_normal'), ('he_uniform', 'he_uniform')], default='glorot_uniform', help_text='Layers kernel initializer of Neural Network', max_length=24)),
                ('loss_function', models.CharField(default='mse', help_text='Loss function of the Neural Network', max_length=24)),
                ('optimizer', models.CharField(choices=[('sgd', 'sgd'), ('rmsprop', 'rmsprop'), ('adagrad', 'adagrad'), ('adadelta', 'adadelta'), ('adam', 'adam'), ('adamax', 'adamax'), ('nadam', 'nadam')], default='adam', help_text='Optimizer of Neural Network', max_length=24)),
                ('epochs', models.IntegerField(default=100, help_text='Number of times that all the batches will be processed in the  Neural Network')),
                ('batch_size', models.IntegerField(default=32, help_text='Batch size')),
                ('validation_split', models.FloatField(default=0.05, help_text='Percentage of the training data that will be used for purpouses in the Neural Network')),
                ('early_stopping', models.BooleanField(default=False, help_text="Stops the training process in the Neural Network when it's not getting any improvement")),
                ('datamodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='datamodel.DataModel')),
            ],
        ),
    ]
